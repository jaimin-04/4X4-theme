(() => {
    var u = class {
        constructor(e) {
            let t = e.dataset.urls;
            let json = e.dataset.json;
            console.log("Json: " + JSON.parse(json)[0].name);
            this.collectionPosition = +e.dataset.collectionPosition, this.elms = {
                container: e,
                field1: e.querySelector(".chosen-container[data-field-index='1']"),
                field2: e.querySelector(".chosen-container[data-field-index='2']"),
                field3: e.querySelector(".chosen-container[data-field-index='3']"),
                buttonSubmit: e.querySelector(".js-btn-submit"),
                buttonReset: e.querySelector(".js-btn-reset")
            }, this.getData(json).then(i => {
                i = i.flat(2);
                let l = AT.cookie.get("arn-filter");
                if (!!l && l instanceof Array) {
                    let [o, r, a] = l;
                    if (!o || !r || !a) {
                        AT.cookie.delete("arn-filter"), this.initField(this.elms.field1, i);
                        return
                    }
                    let s = i.find(c => String(c.name).toLowerCase() == o.toLowerCase());
                    if (!s) {
                        AT.cookie.delete("arn-filter"), this.initField(this.elms.field1, i);
                        return
                    }
                    let n = s.field_2;
                    if (s = n.find(c => String(c.name).toLowerCase() == r.toLowerCase()), !s) {
                        AT.cookie.delete("arn-filter"), this.initField(this.elms.field1, i);
                        return
                    }
                    let d = s.field_3;
                    !!n && !!d && d.some(c => String(c).toLowerCase() == a.toLowerCase()) ? (this.setField(this.elms.field1, o, i), this.setField(this.elms.field2, r, n), this.setField(this.elms.field3, a, d, !0)) : (this.initField(this.elms.field1, i), AT.cookie.delete("arn-filter"))
                } else this.initField(this.elms.field1, i);
                this.initEventFieldTitle(), this.initEventButtonReset(), this.initEventButtonSubmit()
            })
        }
        initField(e, t, i) {
            let l = i ? t : t.map(n => n.name),
                o = e.dataset.fieldIndex,
                r = e.querySelector(".js-title"),
                a = e.querySelector(".chosen-results"),
                s = e.querySelector(".chosen-drop");
            a.innerHTML = "", l.forEach(n => {
                let d = document.createElement("li");
                d.addClass("active-result"), d.innerHTML = String(n).toUpperCase(), d.setAttribute("data-value", n), a.append(d)
            }), a.children.addEvents("click", n => {
                n.stopPropagation();
                let {
                    target: d
                } = n, c = d.dataset.value;
                r.innerHTML = c, e.setAttribute("data-value", c), s.removeClass("active"), this.change(o, t, c)
            })
        }
        setField(e, t, i, l) {
            this.initField(e, i, l), e.setAttribute("data-value", t), e.querySelector(".js-title").innerHTML = t.toUpperCase(), e.addClass("active")
        }
        change(e, t, i) {
            let {
                field2: l,
                field3: o,
                buttonSubmit: r
            } = this.elms;
            switch (e) {
                case "1": {
                    let a = t.find(s => String(s.name).toLowerCase() == i.toLowerCase()).field_2;
                    this.resetField(l), this.resetField(o), this.initField(l, a), l.addClass("active"), l.querySelector(".chosen-drop").addClass("active");
                    break
                }
                case "2": {
                    let a = t.find(s => String(s.name).toLowerCase() == i.toLowerCase()).field_3;
                    this.resetField(o), this.initField(o, a, !0), o.addClass("active"), o.querySelector(".chosen-single").click();
                    break
                }
                case "3":
                    break
            }
        }
        resetField(e) {
            let t = e.querySelector(".js-title");
            e.removeClass("active"), t.innerHTML = t.dataset.placeholder, e.setAttribute("data-value", ""), e.querySelector(".chosen-results").innerHTMl = ""
        }
        initEventFieldTitle() {
            let {
                container: e
            } = this.elms;
            e.querySelectorAll(".chosen-container").forEach(t => {
                let i = t.querySelector(".chosen-single"),
                    l = t.querySelector("input[name='search']"),
                    o = t.querySelector(".chosen-results"),
                    r = i.nextElementSibling;
                i.addEvent("click", () => {
                    r.hasClass("active") ? r.removeClass("active") : r.addClass("active")
                }), document.addEvent("click", a => {
                    i.parentElement.contains(a.target) || r.removeClass("active")
                }), l.addEvent("input", () => {
                    let a = l.value.toLowerCase();
                    o.children.forEach(s => {
                        s.innerHTML.toLowerCase().includes(a) ? s.style.display = "block" : s.style.display = "none"
                    })
                })
            })
        }
        getData(e) {
            // return Promise.all(e.split(",").map(t => fetch(t, {
            //     dataType: "json"
            // })))

          return Promise.resolve(JSON.parse(e));
        }
        initEventButtonReset() {
            let {
                field1: e,
                field2: t,
                field3: i,
                buttonReset: l
            } = this.elms;
            l.addEvent("click", () => {
                this.resetField(e), e.addClass("active"), this.resetField(t), this.resetField(i), AT.cookie.delete("arn-filter")
            })
        }
        initEventButtonSubmit() {
            let {
                buttonSubmit: e,
                field1: t,
                field2: i,
                field3: l
            } = this.elms;
            e.addEvent("click", o => {
                let r = this.getOptionValues();
                if (console.log(t.querySelector(".chosen-drop")), r.filter(Boolean).length < 3) {
                    switch (r.filter(Boolean).length) {
                        case 0:
                            t.querySelector(".chosen-drop").addClass("active");
                            break;
                        case 1:
                            i.querySelector(".chosen-drop").addClass("active");
                            break;
                        case 2:
                            l.querySelector(".chosen-drop").addClass("active");
                            break
                    }
                    o.stopPropagation();
                    return
                }
                let a = `${theme.routes.collectionsUrl}/${r[this.collectionPosition].convertToSlug()}/${r.map(s=>s.convertToSlug()).filter((s,n)=>this.collectionPosition!=n).join("+")}`;
                AT.cookie.set("arn-filter", r, 7), window.location.href = a
            })
        }
        getOptionValues() {
            let {
                field1: e,
                field2: t,
                field3: i
            } = this.elms;
            return [`${e.dataset.value}`, `${t.dataset.value}`, `${i.dataset.value}`]
        }
    };
    window.Filter = u;
})();